{"meta":{"title":"Jojo's Blog","subtitle":"","description":"","author":"Jojo Yang","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Flex Box","slug":"flex","date":"2020-06-19T15:39:00.000Z","updated":"2020-06-22T00:58:18.327Z","comments":true,"path":"2020/06/19/flex/","link":"","permalink":"http://yoursite.com/2020/06/19/flex/","excerpt":"","text":"Properties for the Parent(flex container)two axis cross axis main axis flex-direction the direction of the main axis, thus defining the direction flex items are placed in the flex container row（default）：main-axis is horizontal directions, start point is on the left row-reverse：main-axis is horizontal directions, start point is on the right column：main-axis is vertical directions, start point is on the top column-reverse：main-axis is vertical directions, start point is on the bottom flex-wrap nowrap(default): all flex items will be on the one line wrap: flex items will wrap onto multiple lines from top to bottom wrap-reverse: flex items will wrap onto multiple lines from bottom to top flex-flow flex-direction + flex wrap .containers { flex-flow: column wrap } justify-content define the alignment along the main axis flex-start(default): items are packed toward the start of the flex-direction flex-end: items are packed toward the end of the flex-direction center: items are centered along the line space-between: items are evenly distributed in the line, first item is on the start line, lastitem on the end line space-around: items are evenly distributed in the line with equal space around them, visuallythe spaces are not equal, since all the items have equal space on both side align-items how flex items are laid out along the cross axis on the current line stretch(default): stretch to fill the container(still respect min-width/max-width) flex-start/start/self-start items are placed start of the cross axis the difference between these is subtle, and is about respecting the flex-direction rulesor the writling-mode rules flex-end/end/self-end items are placed at the end of the cross axis the difference between thses is subtle, and is about respecting the flex-direction rulesor the writling-mode rules center items are centered in the cross-axis baseline itmes are aligned such as their baselines align align-content This aligns a flex container’s lines within when there is extra space in the cross-axis this property has no effect when there is only one line of flex items stretch(default): lines stretch to take up the remaining space flex-start/start: items packed to the start of the container flex-start: honors the flex direction start: honors the writing mode direction flex-end/end: items packed to the end of the container flex-end: honors the flex direction end: honors the writing mode direction center: items centered in the container space-around: items evenly distributed with equal space around each line space-between: items evenly distributed the first line is at the start of the container the last on is at the end the main diff between align-items and align-content is the exptra space, there is some extra space inthe align items, however there is no extra space in the align-content(except space-around and spacebetween) Properties for the Children(flex items)order control the order in which they appear in the flex container default is 0 the value is smaller, it will be in the front of the container flex-grow the ability for a flex item to grow if necessary Negative numbers are invalid defalut is 0, which means even there is extra space, it will not grow if all items have flex-glow set to 1, the remaining space in the container will be distributedequally to all children if one of the children has a value of 2, the remaining space would take up twice as much space as the others flex-shrink the ability for a flex item to shrink if necessary Negative numbers are invalid default is 1, if the space is not enough, it will shrink if an item is 0, others are 1, then if the space is not enough, the previous one will not shrink flex-basis: defines the default size of an element before the remaining space is distributed on the main-axis can set to width/height, then the item will have the fixed size default is auto, the original size of the item flex shorthand for flex-grow, flex-shrink and flex-basis, default value is 0 1 auto it is recommended that you use this shorthand property rather than set the individual properties.the shorthand sets the other values intelligiently align-self the default alignment to be overridden for individual flex items default is auto, inferit from the align-items of parent items, if there is no parent, it will be stretch","categories":[{"name":"Front End","slug":"Front-End","permalink":"http://yoursite.com/categories/Front-End/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"},{"name":"Front End","slug":"Front-End","permalink":"http://yoursite.com/tags/Front-End/"}]}],"categories":[{"name":"Front End","slug":"Front-End","permalink":"http://yoursite.com/categories/Front-End/"}],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"},{"name":"Front End","slug":"Front-End","permalink":"http://yoursite.com/tags/Front-End/"}]}